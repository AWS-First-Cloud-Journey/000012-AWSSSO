[
{
	"uri": "//localhost:1313/1-prerequisite/1-create-aws-account/",
	"title": "Create AWS Account in AWS Organizations",
	"tags": [],
	"description": "",
	"content": "Setting up AWS Account Choosing AWS Account for the Workshop ‚ÑπÔ∏è Information: To perform this workshop, you need a standalone AWS account that is not part of AWS Organizations. AWS IAM Identity Center (formerly AWS Single Sign-On) requires an independent account to be configured as the Management Account.\nUsing an Existing AWS Account ‚ÑπÔ∏è Information: If you are using an existing account ‚Äî whether a personal or company account ‚Äî make sure you clearly understand the impacts and organizational policies related to resource provisioning in that account.\nüí° Pro Tip: If you already have an AWS account that is not part of AWS Organizations and are using an IAM User or IAM Role with Administrator privileges, you can skip the rest of this task and move on to the next one.\n‚ÑπÔ∏è Information 2025: AWS IAM Identity Center now supports integration with Amazon Q Developer, Amazon QuickSight, and other modern AWS services. The service itself is completely free; you only pay for the underlying AWS resources you use.\nCreating a New AWS Account If you don‚Äôt have an AWS account yet, you can create your own here. A payment method, usually a credit card, is required to activate the account for these hands-on exercises. The registration process includes a phone call where you‚Äôll need to enter a verification code using your phone keypad.\n‚ö†Ô∏è Warning: If you are currently signed in to the AWS Management Console, you must sign out before clicking here to create a new AWS account.\nPreparing an IAM User for the Workshop üîí Security Note: Strictly limiting the use of the default root account that comes with every AWS account is considered best practice under the principle of least privilege. If you have an AWS account but no IAM User or Role to work with, follow the steps below to prepare for the workshop.\nSign in to your AWS account Create a User in AWS IAM Go to IAM ‚Üí Users ‚Üí Create user Enter information as shown below: User name: Choose an easy-to-remember name, e.g. adminUser. Are you providing console access to a person? ‚Üí Select Choose I want to create an IAM user (create a traditional IAM user). Console password: Choose Custom password to set your own password. Click Next to proceed to the permissions step.\nAssign Permissions to the User In the search box, type AdministratorAccess. Select AdministratorAccess (an AWS managed policy). This policy grants full administrative access, suitable when you need the user to have the highest privileges (similar to an admin account). Click Attach policies to grant the permissions. Click Create user to finish. ‚ö†Ô∏è Note: If you do not want the user to have full admin rights, you can choose more restrictive policies (e.g., only for S3, EC2, etc.).\nüí° Pro Tip: When setting up an IAM User with Administrator privileges, make sure to store your credentials securely and enable Multi-Factor Authentication (MFA) to enhance the security of your account. MFA is an important additional security layer in a Zero Trust model.\nüîí Security Note: In a real production environment, you should apply the principle of least privilege by granting only the minimum permissions necessary for each IAM User instead of AdministratorAccess. AWS IAM Identity Center supports implementing a Zero Trust strategy with features such as Attribute-Based Access Control (ABAC), integration with Identity Providers (Microsoft Entra ID, Okta), and automatic session management. However, for the purpose of this workshop, Administrator privileges are required to configure AWS IAM Identity Center.\n"
},
{
	"uri": "//localhost:1313/2-aws-cli-access/2.1-manual/",
	"title": "Manually Refresh Credentials",
	"tags": [],
	"description": "",
	"content": "Configure AWS CLI - Manually Refresh Credentials ‚ÑπÔ∏è Information: In this section, we will guide you on how to manually configure the AWS CLI to authenticate users with AWS IAM Identity Center. With this method, you must manually refresh temporary credentials when they expire.\nPrerequisites Install the latest version of AWS CLI. For more information, see Install or update to the latest version of the AWS CLI. You must have authenticated SSO access in IAM Identity Center. Manual Configuration Process Sign in to the AWS Access Portal using the login URL provided for your organization. In the Accounts tab or by selecting the AWS account icon, identify the AWS account you want to access. Expand the account to display the available IAM roles (for example: AdministratorAccess, readOnly). Next to the desired IAM role, select Access keys to obtain temporary credentials. ‚ÑπÔ∏è Information: AWS Access Portal is a centralized interface for managing access to all AWS accounts in your organization through IAM Identity Center.\nUsing Temporary Credentials In the Get credentials dialog box, you have three options to use the credentials:\nOption 1: Set AWS Environment Variables\nChoose your operating system (MacOS and Linux, Windows, or PowerShell) Copy the provided commands to the clipboard Paste and execute the commands in the terminal to set environment variables Verify again whether the CLI has received the credentials\naws sts get-caller-identity\nThese variables override all existing credential configurations in the current terminal session, meaning the CLI has been successfully authenticated using temporary credentials\nüí° Pro Tip: Use this option when you need to quickly switch between different roles within the same working session. Option 2: Add a profile to the AWS credentials file\nCopy the provided commands Paste them into the ~/.aws/credentials file to create a new named profile Use this profile with the \u0026ndash;profile option in AWS CLI commands Example: aws s3 ls \u0026ndash;profile sso-admin-profile üîí Security Note: Named profiles allow you to maintain multiple sets of credentials at the same time and minimize the risk of using the wrong permissions when performing AWS CLI operations.\nOption 3: Use individual values in AWS service client\nCopy the individual credential values (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN) Integrate these values into your application code when using AWS SDK ‚ö†Ô∏è Warning: Temporary credentials have a limited validity period, usually 1 hour. When they expire, you need to repeat the process to obtain new credentials. Temporary credentials should not be stored in long-term configuration files or version control systems.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Using AWS IAM Identity Center for Robust Identity Management",
	"tags": [],
	"description": "",
	"content": "Using AWS IAM Identity Center for Robust Identity Management Introduction ‚ÑπÔ∏è Information: This workshop is designed to help you become familiar with AWS IAM Identity Center (formerly AWS Single Sign-On) to effectively manage your organization\u0026rsquo;s employee identities across multiple AWS accounts.\nScenario Your company is new to cloud computing and planning to build systems on AWS. The company wants to enforce robust security access controls in a centralized and scalable manner.\nAs a cloud administrator, you\u0026rsquo;ve been tasked with setting up access to AWS accounts for company employees following the principle of least privilege. During configuration, you\u0026rsquo;re responsible for setting up IAM Identity Center and providing access to AWS accounts based on users\u0026rsquo; group membership and project/team roles.\nOverview Level: Intermediate Duration: 1-3 hours NIST Cybersecurity Framework (CSF) Function: Identify AWS Cloud Adoption Framework (CAF) Component: Directive Cost: üí° Pro Tip: There are no costs associated with IAM Identity Center and AWS Organizations. For other services, most costs incurred in this workshop are covered under the free tier for specific services in your AWS account (e.g., Amazon EC2). However, some costs related to data storage (e.g., AWS CloudTrail logs) may be incurred. You should clean up your environment by following the instructions in the Cleanup section after completing the workshop to avoid additional costs.\nSupported Regions: ‚ÑπÔ∏è Information: It\u0026rsquo;s recommended to run this workshop in the us-east-1 Region.\nTarget Audience: Cloud and IT Administrators Prerequisites: AWS account not yet part of AWS Organizations IAM user with administrative permissions for that account ‚ö†Ô∏è Warning: Please launch an Amazon EC2 instance in your new account a few hours before starting this workshop to ensure your account is active and ready for the workshop. If you\u0026rsquo;re attending this workshop at an AWS event such as re:Invent or re:Inforce, you\u0026rsquo;ll be provided with AWS credits to cover workshop-related costs.\nüîí Security Note: IAM Identity Center provides centralized access management, helping minimize security risks associated with managing multiple credentials across multiple AWS accounts. Implementing IAM Identity Center is an important part of a Zero Trust strategy and adheres to the principle of least privilege.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "Preparation Steps for AWS Landing Zone Deployment Overview This guide outlines the setup process for creating a Landing Zone using AWS Organizations. It will help you structure your AWS accounts and resources for a well-architected multi-account environment. The primary focus is to create and organize four Organizational Units (OUs), establish core accounts, and implement cross-account communication strategies.\nBy the end of this exercise, you will have:\nA functional AWS Organization with: Four Organization Units (OUs): Security, Shared Services, Logging, and Application. Each OU will group its designated AWS accounts. AWS Accounts created with the following purposes: Security Account for centralized security management. Shared Services Account for shared networking and management services. Logging Account to consolidate AWS CloudTrail, Config, and VPC Flow Logs. Application Account for specific business unit workloads. These foundational steps will enable governance, security controls, and cost management within your AWS environment.\nTarget Accounts and Resources Logging Account:\nThis serves as a centralized repository for storing Amazon VPC Flow Logs, AWS CloudTrail logs, and AWS Config data. Security Account:\nHost a GuardDuty master account, manage AWS Security Hub, and aggregate security alerts. Shared Services Account:\nProvision a shared VPC for resource access across accounts. Establish AWS Direct Connect, Transit Gateway, and other shared network resources. Application Accounts:\nBusiness unit-specific accounts for production and non-production workloads. Analytics, Dev/Test, and other application-specific resources. Lab Architecture Diagram Steps to Implement Create AWS Account in AWS Organization:\nEstablish the core accounts (Security, Shared Services, Logging, and Application) under your AWS Organization. Use the AWS Management Console or AWS CLI to automate account creation and structure. Setting up Organization Unit:\nConfigure Organization Units (OUs) for logical grouping. Create policies to enforce specific security or compliance requirements for each OU. Invite Existing AWS Accounts to the AWS Organization:\nLink any existing accounts to the AWS Organization using an invite process. Validate and assign each account to its corresponding OU. Access Member Accounts in the Organization:\nEnable cross-account access using IAM roles. Set up AWS SSO or IAM Role Switch to streamline management and operational tasks across accounts. Important Considerations Cost Optimization: Ensure that each account\u0026rsquo;s usage is tracked separately to optimize billing and monitoring. Security Posture: Implement security controls, such as SCPs (Service Control Policies) and centralized logging, to maintain compliance. Networking: Plan for network isolation and interconnectivity using VPC Peering, Transit Gateway, and Direct Connect configurations. Refer to the AWS Landing Zone Documentation for more advanced configurations and best practices.\n"
},
{
	"uri": "//localhost:1313/2-aws-cli-access/2.2-automatic/",
	"title": "Automatic Credential Refresh",
	"tags": [],
	"description": "",
	"content": "Configuring AWS CLI - Automatic Credential Refresh ‚ÑπÔ∏è Information: This section describes how to configure AWS CLI with automatic credential refresh to authenticate users with AWS IAM Identity Center. This method uses the Open ID Connect (OIDC) standard with Device Code Authorization, allowing you to initialize access directly via the aws configure sso command in the AWS CLI.\nConfigure User Profiles ‚ÑπÔ∏è Information: Using the auto-refresh-credentials method, we will configure two profiles:\nadminUser - Profile with administrative rights\nreadOnlyUser - Profile with read-only rights\nConfigure adminUser Profile Open a terminal window and run the following command: aws configure sso --profile adminUser Provide the SSO session name: sso-session-adminUser Enter the AWS Gateway URL and select the SSO region: us-east-1 For the SSO registration scope, provide the value: sso:account:access A new browser window will open. Log in as adminUser and follow the authentication steps.\nOnce done, test the configuration using the command:\naws s3 ls --profile adminUser üí° Pro Tip: Use the admin profile (adminUser) only when you need to perform operations that require admin privileges such as starting/stopping EC2, creating/deleting AWS resources. This follows the least privilege principle.\nCheck adminUser permissions Use the adminUser profile to stop an EC2 instance:\nGet the EC2 instance ID from the AWS Management Console Run the following command (replace [instance-id] with the actual EC2 ID): aws ec2 stop-instances --instance-ids [instance-id] --profile adminUser ‚ÑπÔ∏è Info: With the adminUser profile, you can perform the same administrative operations through the CLI as you would through the AWS Management Console.\nConfigure readOnlyUser profile Open a terminal window and run the following command: aws configure sso --profile readOnlyUser Provide an SSO session name: sso-session-readOnlyUser Enter the AWS Gateway URL and select the SSO region: us-east-1 For the SSO registration scope, provide the value: sso:account:access Follow the authentication steps in a new browser window. üîí Security Note: Using profiles with appropriate permissions (e.g., readOnlyUser) is an important part of the least privilege security model, helping to minimize the risk of misuse or unauthorized access.\nCheck readOnlyUser permissions Try stopping an EC2 instance with a readOnlyUser profile:\nGet the EC2 instance ID from the AWS Management Console Run the following command (replace [instance-id] with the actual EC2 ID): aws ec2 stop-instances --instance-ids [instance-id] --profile readOnlyUser ‚ö†Ô∏è Warning: This command will fail because readOnlyUser does not have permission to stop the EC2. This illustrates that the permissions configuration is working correctly, ensuring users can only perform actions appropriate to their role.\nBenefits of Integrating IAM Identity Center with AWS CLI ‚ÑπÔ∏è Info: Integrating IAM Identity Center with AWS CLI offers many benefits:\nFlexible switching between accounts and roles No need to manually manage credentials or profiles Automatically refresh credentials Optimize development and administration processes when working across multiple AWS environments Managing IAM Identity Center sessions Once you\u0026rsquo;re done using your IAM Identity Center profile, you can:\nDo nothing and let your AWS temporary credentials and IAM Identity Center credentials expire automatically Or run the following command to immediately clear all cached credentials: aws sso logout üí° Pro Tip: Use the aws sso logout command when you need to be safe by clearing all cached credentials, especially when working on shared computers or in security-sensitive environments.\n‚ÑπÔ∏è Info: To reuse your IAM Identity Center profile after signing out, simply run the AWS CLI command with the corresponding --profile parameter, and the system will automatically ask you to authenticate again.\n"
},
{
	"uri": "//localhost:1313/2-aws-cli-access/",
	"title": "AWS CLI",
	"tags": [],
	"description": "",
	"content": "AWS CLI Access with IAM Identity Center Overview This guide explains how to authenticate and access AWS resources via the AWS Command Line Interface (CLI) when using IAM Identity Center.\n‚ÑπÔ∏è Information: AWS Command Line Interface (CLI) provides the ability to interact with AWS services through the command line. When using IAM Identity Center, you can securely authenticate and access AWS resources across multiple accounts.\nAuthentication Overview with IAM Identity Center When using AWS IAM Identity Center, you can authenticate to the AWS CLI using:\nIAM Identity Center\u0026rsquo;s integrated directory An external identity provider connected to IAM Identity Center After authentication, IAM Identity Center maps your login credentials to the corresponding IAM role to execute AWS CLI commands with appropriate permissions.\nCredential Refresh Methods ‚ÑπÔ∏è Information: There are two main methods for obtaining and refreshing temporary credentials for IAM Identity Center users:\n1. Manual Credential Refresh This method allows you to obtain temporary credentials for a specific IAM role associated with a permission set in an AWS account. The process:\nLog in to the AWS access portal Select the AWS account and permission set you need to access Copy the provided AWS CLI commands Paste and execute the commands in your terminal to set up credentials ‚ö†Ô∏è Warning: Temporary credentials have a limited lifespan (typically 1 hour). You need to repeat this process when credentials expire.\n2. Automatic Credential Refresh (Recommended) üí° Pro Tip: This method uses the Open ID Connect (OIDC) standard with Device Code Authorization, providing a more seamless and secure authentication experience.\nThe process:\nConfigure AWS CLI with the aws configure sso command Provide the IAM Identity Center URL and AWS Region Authenticate through a web browser Select the AWS account and IAM role to access AWS CLI will automatically refresh credentials when needed üîí Security Note: The automatic refresh method not only improves user experience but also enhances security by:\nEliminating the need to copy/paste sensitive credentials Automatically managing credential lifecycle Supporting integrated multi-factor authentication (MFA) Adhering to Zero Trust principles with short-lived sessions ‚ÑπÔ∏è Information: From AWS CLI v2.9.0 and above, you can use the SSO configuration file (~/.aws/config) to store multiple profiles for different AWS accounts and permission sets, allowing quick switching between different roles.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/2-configure-ou/",
	"title": "Prerequisites for IAM Identity Center",
	"tags": [],
	"description": "",
	"content": "Prerequisites for IAM Identity Center ‚ÑπÔ∏è Information: You can skip this section if you have already activated IAM Identity Center in the AWS Account you are using for this workshop.\nBasic Requirements Before setting up IAM Identity Center, you need:\nAn AWS account with Administrator permissions. If you don‚Äôt have one, create an account now.\nSet up AWS Organizations and enable the All features mode. For more details on this configuration, see ‚ÄúEnabling All Features in Your Organization‚Äù in the AWS Organizations User Guide.\nEnabling AWS Organizations ‚ÑπÔ∏è Information: AWS Organizations is an account management service that allows you to consolidate multiple AWS accounts into a single organization that you create and centrally manage. This is a prerequisite for using IAM Identity Center.\nIn the AWS Management Console, at the top left corner next to Services, click the search box, type AWS Organizations, and select the service.\nClick Create Organization. By default, the organization is created with all features enabled.\nThe organization is created, and the AWS accounts page appears. The only account currently available is your management account, which is located under the root organizational unit (OU). üí° Pro Tip: AWS Organizations allows you to centrally manage multiple AWS accounts, simplifying billing, access control, and compliance with security policies. You should design an OU structure that aligns with your organization‚Äôs model to optimize access management.\nEnabling IAM Identity Center ‚ÑπÔ∏è Information: IAM Identity Center (formerly AWS SSO) is a centralized identity and access management service for AWS accounts and cloud applications. It simplifies access control and provides a single sign-on (SSO) experience for users.\nWhen you open IAM Identity Center for the first time, you‚Äôll be prompted to enable the service before managing it:\nIn the AWS Management Console, click Services in the upper-left corner. Open the IAM Identity Center console. Choose Enable. ‚ÑπÔ∏è Information: After activation, IAM Identity Center creates a service-linked role in all accounts within your AWS Organization. It also automatically creates the same service-linked role in any new accounts that are added to your organization later. This role allows IAM Identity Center to access each account‚Äôs resources on your behalf.\nDelegated Administration üîí Security Note: IAM Identity Center allows you to designate another member account within your AWS Organization ‚Äî other than the Organization Management Account ‚Äî to perform administrative tasks for Identity Center. This supports the principle of least privilege by reducing direct access to the Management Account. In production environments, you should configure delegated administration to minimize security risks associated with using the Management Account for day-to-day operations.\nüí° Pro Tip: When setting up IAM Identity Center, consider an identity strategy that best fits your organization. You can choose to use the Identity Center Directory, connect to Microsoft Active Directory via AWS Directory Service, or integrate with an external identity provider (IdP) that supports SAML 2.0 such as Okta, Azure AD, or Google Workspace.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/3-invite-aws-account/",
	"title": "Create Users and Groups in IAM Identity Center",
	"tags": [],
	"description": "",
	"content": "Create Users and Groups in IAM Identity Center ‚ÑπÔ∏è Information: This section guides you through creating users and groups in the built-in identity store of IAM Identity Center.\nIf you want to configure an External Identity Provider (IdP) as the identity source, refer to the ‚ÄúUsing External IdP with IAM Identity Center‚Äù section in Extra Credit.\nChoosing an Identity Source ‚ÑπÔ∏è Information: The selected identity source determines where IAM Identity Center retrieves users and groups for SSO access.\nBy default, IAM Identity Center provides a built-in identity store for fast and simple user management.\nThis is an ideal option for small organizations or testing environments.\nüí° Pro Tip: For enterprise environments, you can connect IAM Identity Center to Microsoft Active Directory (via AWS Directory Service) or integrate with external identity providers that support SAML 2.0, such as Okta, Microsoft Entra ID (formerly Azure AD), or Google Workspace.\nManaging Identities in IAM Identity Center Users and groups that you create in the IAM Identity Center‚Äôs built-in identity store exist only within IAM Identity Center.\nFollow the steps below to add users and groups to your identity store.\nSteps 1. Create Groups ‚ÑπÔ∏è Information: In this workshop, we will create two groups: Administrators and readOnly.\nGroups help organize users by their roles and responsibilities, simplifying access management.\nNavigate to the IAM Identity Center Console Select Groups and click Create Group On the Create group page: Enter a Group Name, for example: Administrators Enter a Description, for example: Group for administrator users Click Create group A green success banner will appear confirming that the Administrators group was created successfully. Repeat steps 1‚Äì3 to create the readOnly group. üí° Pro Tip: Organizing users into groups enables more efficient access management and makes it easier to apply role-based permission policies.\nWhen your organizational structure changes, you only need to update group memberships rather than adjusting individual user permissions.\nüîí Security Note: Follow the principle of least privilege by creating groups with specific and limited permissions.\nThis minimizes security risks and simplifies access audit and compliance.\n2. Create Users ‚ÑπÔ∏è Information: In this workshop, we‚Äôll create two users: adminUser and readOnlyUser, to demonstrate different access levels.\nNavigate to the IAM Identity Center Console Under the Workforce pool, select Users, then click Add User On the Add User page: Enter Username, e.g. adminUser For Password, select Generate a one-time password that you can share with the user Enter Email Address using a format such as email+admin@domain.com Confirm the email address Enter First name Enter Last name Keep Display name as entered Click Next (you can explore optional fields if desired) On the Add users to groups (optional) page: Select the Administrators group Click Next On the Review and add user page: Review the information provided in previous steps Click Add user A pop-up window will appear displaying the One-time password.\nClick Copy to save this password for later use in the workshop. üîí Security Note: The one-time password is displayed only once and cannot be retrieved later.\nEnsure it is securely stored and shared via a secure channel.\nIn production environments, you should enable Multi-Factor Authentication (MFA) for all users to enhance security.\n‚ö†Ô∏è Warning: Repeat steps 1‚Äì6 to create the readOnlyUser.\nUse a unique email different from the admin user (e.g. username+readonly@domain.com) and make sure to assign this user to the readOnly group in Step 4.\nüí° Pro Tip: IAM Identity Center supports user lifecycle management, including creation, updates, deactivation, and deletion.\nIn enterprise environments, these processes can be automated via HR system integration or AWS APIs.\nYou have successfully created two new users and groups.\nUsing IAM Identity Center, these users can now access multiple AWS accounts within your AWS Organization with appropriate permissions based on their roles.\n"
},
{
	"uri": "//localhost:1313/3-using-time-based-access-control/",
	"title": "Time-based access control",
	"tags": [],
	"description": "",
	"content": "There may be scenarios where you want to provide access to specific users or groups for a defined time period, such as granting permissions to Security Auditors during audit periods or to consultants for the duration of a project. In these situations, you can use permission sets with inline policies containing conditions to implement time-based access control.\n‚ÑπÔ∏è Information: Time-based access control allows you to automatically grant and revoke permissions based on date and time conditions, reducing the operational overhead of managing temporary access.\nThis guide explores the case of providing temporary access to AWS accounts for Security Auditors. To implement this requirement with time-based access control, you\u0026rsquo;ll complete the following steps:\nCreate a Permission Set with necessary access for Security Auditors as an inline policy with time-based access control conditions Create a Group for Security Auditors Assign users to the Security Auditors Group Assign access to AWS Accounts for the Security Auditors group with the newly created permission set Creating a Permission Set Navigate to the IAM Identity Center Console\nSelect the AWS Region recommended by the AWS Team if this is part of an AWS Event. If you\u0026rsquo;re doing this on your own, select the Region where you intend to configure the rules.\nClick on Permission sets in the left menu under the Multi-account permissions section and click the Create permission set button. On the Select permission set type page:\nSelect the Custom permission set radio button and click Next. On the Specify policies page:\nExpand the Inline Policy section, then delete the existing braces. Copy and paste the following permission policy into the text area: Click Next { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;acm:Describe*\u0026#34;, \u0026#34;acm:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34;, \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:GetTrailStatus\u0026#34;, \u0026#34;cloudtrail:ListTags\u0026#34;, \u0026#34;cloudtrail:LookupEvents\u0026#34;, \u0026#34;cloudwatch:Describe*\u0026#34;, \u0026#34;cloudwatch:ListTagsForResource\u0026#34;, \u0026#34;config:BatchGetAggregateResourceConfig\u0026#34;, \u0026#34;config:BatchGetResourceConfig\u0026#34;, \u0026#34;config:Deliver*\u0026#34;, \u0026#34;config:Describe*\u0026#34;, \u0026#34;config:Get*\u0026#34;, \u0026#34;config:List*\u0026#34;, \u0026#34;detective:GetGraphIngestState\u0026#34;, \u0026#34;detective:ListGraphs\u0026#34;, \u0026#34;detective:ListMembers\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:Get*\u0026#34;, \u0026#34;guardduty:DescribePublishingDestination\u0026#34;, \u0026#34;guardduty:Get*\u0026#34;, \u0026#34;guardduty:List*\u0026#34;, \u0026#34;iam:GenerateCredentialReport\u0026#34;, \u0026#34;iam:GenerateServiceLastAccessedDetails\u0026#34;, \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;inspector:Describe*\u0026#34;, \u0026#34;kms:Describe*\u0026#34;, \u0026#34;kms:Get*\u0026#34;, \u0026#34;kms:List*\u0026#34;, \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetResourcePolicy\u0026#34;, \u0026#34;secretsmanager:List*\u0026#34;, \u0026#34;securityhub:Describe*\u0026#34;, \u0026#34;securityhub:Get*\u0026#34;, \u0026#34;securityhub:List*\u0026#34;, \u0026#34;trustedadvisor:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;DateGreaterThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-26T00:00:00Z\u0026#34; }, \u0026#34;DateLessThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-27T23:59:59Z\u0026#34; } } } ] } On the Specify permission set details page:\nProvide a name for the permission set, for example: secAuditorTimeBased Description: Time-based read-only permissions for auditors Leave the remaining fields [Session Duration, Relay state, and Tags] at their default values Click Next On the Review and create page:\nReview the details provided in the previous steps Click the Create button A green confirmation banner will appear: Permission set \u0026ldquo;secAuditorTimeBased\u0026rdquo; has been successfully created. üîí Security Note: The time-based condition in this policy uses the global condition key aws:CurrentTime that evaluates against the current date and time. The dates in the policy should be in ISO 8601 format with UTC timezone.\nCreating a Group Let\u0026rsquo;s create a new Group named securityAuditors:\nNavigate to the IAM Identity Center Console\nSelect Groups under the Workplace pool section and click Create Group. On the Create group page:\nProvide Group Name: securityAuditors Provide Description, e.g., Group for security Auditors Click Create group The securityAuditors group has been successfully created. Creating a User and Adding to the Group For this module, we\u0026rsquo;ll create a new user: secAuditUser\nNavigate to the IAM Identity Center Console Select Users under the Workplace pool section and click Add User. On the Add User page: Provide Username, e.g., secAuditUser For Password, select the Generate a one-time password that you can share with the user radio button Provide Email Address, using the format email+secaudit@domain.com Confirm the email address provided in the previous field Provide First name: secAudit Provide Last name: user Leave Display name as entered and click Next On the Add users to groups - optional page: Select the SecurityAuditors Group and click Next On the Review and add user page: Review the information provided in the previous steps and click Add user A pop-up window will appear with a One-time password. Copy the information using the Copy button and save it for later use in the workshop. üí° Pro Tip: When working with temporary access, it\u0026rsquo;s a good practice to create functional groups that reflect job roles or responsibilities rather than creating groups for individuals. This approach simplifies access management as people transition between roles. Assigning Permission Set to AWS Account Navigate to the IAM Identity Center Console, select AWS accounts under the Multi-account permissions section Select the account you want users to have access to Click Assign users or groups On the Assign users and Group to AccountName page: Select Groups, select securityAuditors and click Next On the Select permission sets page: Under Permission sets, select secAuditorTimeBased and click Next On the Review and submit page: Review the information and click Submit IAM Identity Center will associate the User group with the Permission set and assign it to the selected AWS Account. You\u0026rsquo;ll see a page with a green banner. Verifying Access Note: For a better experience, you should perform the following verification steps in private browsing mode or a different web browser\nLog in to the AWS access Portal using the User portal URL saved when creating secAuditUser\nProvide the username for the user previously created in this module\nProvide the one-time password for the username\nSet a new password for the user\nAfter successful login, on the SSO portal page, select the Management console link for the secAuditorTimeBased role\nAfter successfully logging into the Management Console, navigate to the EC2 console page and confirm that you can list all instances by selecting Instances in the left menu\n‚ÑπÔ∏è Information: The secAuditorTimeBased permission set includes ec2:Describe* permissions, which allow the user to view EC2 resources but not modify them‚Äîperfect for audit-related activities.\nTo simulate access control for Security Auditors, let\u0026rsquo;s update the Permission set and provision it again in our account. We\u0026rsquo;ll simulate this by selecting a timeframe in the past (2022-07-04).\nNavigate to the IAM Identity Center Console\nClick on Permission sets in the left menu and select the secAuditorTimeBased permission set On the Select permission set type screen, select Custom permission set and click Next.\nEdit the inline policy by clicking the Edit button Copy and replace the permission policy with the code below\nThe only change in the policy is the date/time values occurring in the past \u0026ldquo;2022-07-04T00:00:00Z\u0026rdquo; \u0026ldquo;2022-07-04T23:59:59Z\u0026rdquo;\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;acm:Describe*\u0026#34;, \u0026#34;acm:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34;, \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:GetTrailStatus\u0026#34;, \u0026#34;cloudtrail:ListTags\u0026#34;, \u0026#34;cloudtrail:LookupEvents\u0026#34;, \u0026#34;cloudwatch:Describe*\u0026#34;, \u0026#34;cloudwatch:ListTagsForResource\u0026#34;, \u0026#34;config:BatchGetAggregateResourceConfig\u0026#34;, \u0026#34;config:BatchGetResourceConfig\u0026#34;, \u0026#34;config:Deliver*\u0026#34;, \u0026#34;config:Describe*\u0026#34;, \u0026#34;config:Get*\u0026#34;, \u0026#34;config:List*\u0026#34;, \u0026#34;detective:GetGraphIngestState\u0026#34;, \u0026#34;detective:ListGraphs\u0026#34;, \u0026#34;detective:ListMembers\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:Get*\u0026#34;, \u0026#34;guardduty:DescribePublishingDestination\u0026#34;, \u0026#34;guardduty:Get*\u0026#34;, \u0026#34;guardduty:List*\u0026#34;, \u0026#34;iam:GenerateCredentialReport\u0026#34;, \u0026#34;iam:GenerateServiceLastAccessedDetails\u0026#34;, \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;inspector:Describe*\u0026#34;, \u0026#34;kms:Describe*\u0026#34;, \u0026#34;kms:Get*\u0026#34;, \u0026#34;kms:List*\u0026#34;, \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetResourcePolicy\u0026#34;, \u0026#34;secretsmanager:List*\u0026#34;, \u0026#34;securityhub:Describe*\u0026#34;, \u0026#34;securityhub:Get*\u0026#34;, \u0026#34;securityhub:List*\u0026#34;, \u0026#34;trustedadvisor:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;DateGreaterThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-04T00:00:00Z\u0026#34; }, \u0026#34;DateLessThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-04T23:59:59Z\u0026#34; } } } ] } Save the changes to the Permission set, which provisions the permission set again to the AWS Account\nLog back into the AWS access portal by following the steps and verify access to EC2 instances. You\u0026rsquo;ll see that secAuditUser no longer has permission to list EC2 instances.\n‚ö†Ô∏è Warning: When using time-based access control, be aware of timezone differences. AWS uses UTC for time-based conditions, so adjust your dates and times accordingly to avoid unexpected access denials.\nüí° Pro Tip: For recurring access needs, consider implementing an automated solution using AWS Lambda functions to update the time-based conditions in your permission sets based on a schedule, rather than manually updating policies.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/4-switch-role/",
	"title": "Create Permission Sets",
	"tags": [],
	"description": "",
	"content": "Create Permission Sets ‚ÑπÔ∏è Information: Permission sets are a mechanism for defining centralized permissions within IAM Identity Center, allowing you to consistently apply access rights across all AWS accounts in your organization.\nEach permission set is deployed as an IAM role in every assigned AWS account.\nSteps In this workshop, we will create two permission sets ‚Äî AdministratorAccess and readOnly ‚Äî to illustrate different access levels.\nNavigate to the IAM Identity Center Console.\nSelect the AWS Region recommended by the AWS Team if this is part of an AWS event.\nIf you are performing this on your own, choose a Region geographically close to you to optimize latency.\nClick Permission sets in the left menu under Multi-account permissions and then click Create permission set.\nOn the Select permission set type page: Under Permission set type, select Predefined permission set Under Policy for predefined permission set, choose the AWS managed policy AdministratorAccess, then click Next On the Specify permission set details page: Enter Permission set name: AdministratorAccess Keep all default values Click Next On the Review and create page: Review your selections Click Create ‚ÑπÔ∏è Information: After the permission set is created, you will see a confirmation page.\nIAM Identity Center automatically creates a corresponding IAM role in each AWS account when you assign this permission set to users or groups.\nCreate a Permission Set for Read-Only Access Similarly, let‚Äôs create another permission set for read-only access:\nOn the Select permission set type page: Under Permission set type, select Predefined permission set Under Policy for predefined permission set, choose the AWS managed policy ViewOnlyAccess, then click Next On the Specify permission set details page: Under Permission set name, enter readOnly Keep all other fields (Description, Session Duration, Relay state, and Tags) as default Click Next On the Review and create page: Review your selections Click Create ‚ÑπÔ∏è Information: After the permission set is created, you will see a confirmation page.\nIAM Identity Center automatically creates a corresponding IAM role in each AWS account when you assign this permission set to users or groups.\nüí° Pro Tip: In addition to predefined permission sets, you can create custom permission sets by combining multiple AWS managed policies or defining customer-managed policies using JSON.\nThis allows you to implement fine-grained permissions following the principle of least privilege, tailored to your organization‚Äôs specific needs.\nüîí Security Note: Permission sets in IAM Identity Center support advanced security features such as session duration limits, access requirements, and integration with AWS CloudTrail for activity logging.\nIn production environments, consider setting shorter session durations and enforcing Multi-Factor Authentication (MFA) for permission sets with elevated privileges.\n‚ÑπÔ∏è Information: IAM Identity Center automatically manages the lifecycle of IAM roles created from permission sets, including updating roles when you modify the permission set configuration.\nThis simplifies access management at scale and ensures consistency across your entire AWS Organization.\nYou have successfully created two new Permission Sets.\nNext, let‚Äôs proceed to granting access to users and groups.\n"
},
{
	"uri": "//localhost:1313/4-using-customer-managed-policies/",
	"title": "Customer Managed Policies",
	"tags": [],
	"description": "",
	"content": "When using IAM Identity Center, there are scenarios where you might want to reuse existing IAM permission policies in your permission sets, such as:\nWhen you need the same role across all AWS accounts but require a way to adjust policies in each account to reference their specific resources When you use Identity Center as an alternative to per-account federation, but need to reuse customer managed policies you\u0026rsquo;ve already created Customer Managed Policies (CMP) support with permission sets addresses these requirements. In this guide, you\u0026rsquo;ll walk through a scenario where CMPs can be used to address specific requirements.\n‚ÑπÔ∏è Information: Customer Managed Policies allow you to maintain consistent roles across accounts while still having the flexibility to reference account-specific resources in your policies.\n‚ö†Ô∏è Warning: Before assigning permission sets with IAM policies, you must prepare your member account. The name of the IAM policy in the member account must match case-sensitively with the name of the policy in the management account. IAM Identity Center cannot assign the permission set if the policy doesn\u0026rsquo;t exist in the member account. The permissions granted by the policy don\u0026rsquo;t necessarily need to match exactly between accounts.\nScenario Consider a scenario where an operator group needs access to different member accounts, and their access to those accounts should be limited to specific AWS CloudWatch log groups within those accounts. This requirement can be addressed with Customer Managed Policies (CMPs) where an operatorAccess policy can be created in each AWS account, with the actual policies and permissions/authorizations only allowing CloudWatch operations to be performed on the specified account\u0026rsquo;s log groups. You can then create permission sets attached to the operatorAccess CMP that permit CloudWatch operations on the specified accounts\u0026rsquo; log groups.\nCreating a Customer Managed IAM Policy Navigate to the IAM console to create an IAM policy Select the JSON tab and copy and paste the following policy into the text area Replace \u0026lt;account-id\u0026gt; with the account ID for the account this policy is being created in { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:DescribeLogStreams\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34;, \u0026#34;logs:GetLogEvents\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:us-east-1:\u0026lt;account-id\u0026gt;:log-group:OperationsLogGroup:*\u0026#34; }, { \u0026#34;Action\u0026#34;: [ \u0026#34;logs:DescribeLogGroups\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:us-east-1:\u0026lt;account-id\u0026gt;:log-group::log-stream:*\u0026#34; } ] } Click Next: Tags (Tags are optional)\nClick Next: Review\nOn the Create Policy page, provide the following:\nPolicy Name: operatorAccess Description ‚Äì optional: Policy that grants operator access to CloudWatch log groups Click Create Policy A confirmation message appears: ‚ÄúoperatorAccess‚Äù has been successfully created. üîí Security Note: When creating policies, always follow the principle of least privilege by granting only the permissions necessary to perform the required tasks.\nCreating a Permission Set with Customer Managed Policy Navigate to the IAM Identity Center Console\nSelect the AWS Region recommended by the AWS Team if this is part of an AWS Event, or the Region you intend to configure the rules if you\u0026rsquo;re running this on your own\nClick on Permission sets in the left-hand menu and then click the Create permission set button\nOn the Select permission set type page:\nSelect the radio button Custom permission set Click Next On the Specify policies page:\nExpand the Customer managed policies section Click Attach policies In the textbox labeled Enter Policy name(s), enter operatorAccess This name must exactly match the name of the policy you created earlier in the Create Customer Managed IAM policy step.\nClick Next On the Specify permission set details page:\nProvide a name for the permission set, e.g., operatorAccessPermissionSet Leave the remaining fields [Description, Session Duration, Relay state, and Tags] as default Click Next On the Review and create page:\nReview the details provided in the previous steps Click the Create button A confirmation message appears stating that the permission set named operatorAccessPermissionSet has been successfully created in AWS IAM Identity Center.\nüí° Pro Tip: Create a standard naming convention for your permission sets that indicates their purpose and level of access. This makes it easier to manage permissions at scale.\nCreating a Group Create a new group named operations:\nNavigate to the IAM Identity Center Console\nSelect Groups under Workforce pool and click Create Group\nOn the Create group page:\nProvide Group Name: operations Provide Description, for example: Group for cloud operations Click Create group A group named operations has been successfully created in AWS IAM Identity Center.\nCreate user and add to group For this module, we will create a new user: operationsUser\nNavigate to the IAM Identity Center Console\nSelect Users under Workforce pool and click Create User\nOn the Create User page:\nProvide Username, e.g., operationsUser For Password, choose the radio button Generate a one-time password that you can share with the user Provide Email Address in the format: email+operations@domain.com, e.g., example+operations@amazon.com Confirm the email address Provide First name: operations Provide Last name: user Keep the Display name as entered Click Next On the Add users to groups ‚Äì optional page:\nSelect the operations group Click Next On the Review and add user page:\nReview the information provided in previous steps Click Add user A pop-up window will appear with the One-time password. Use the Copy button to save this information for authentication later.\nTake note of the User portal URL, Username, and Password A green banner confirms that the user operationsUser has been successfully created in IAM Identity Center.\nAssign Permission Set to AWS Account Navigate to the IAM Identity Center Console, and select AWS accounts\nChoose the account to which you want the user to have access\nClick Assign users or groups\nOn the Assign users and groups to AccountName page:\nSelect the operations group Click Next On the Select permission sets page:\nUnder Permission sets, select operatorAccessPermissionSet Click Next On the Review and submit page:\nReview the information Click Submit IAM Identity Center will link the User group with the Permission set and assign it to the selected AWS account. You will see a page with a green confirmation banner.\nüí° Pro Tip: IAM Identity Center allows you to assign multiple permission sets to the same user or group, giving you flexibility in how you structure your access control.\nVerifying Access Note: For a better experience, you should perform the following verification steps in private browsing mode or a different web browser\nLog in to the AWS Portal using the User portal URL saved when creating operationsUser\nProvide the username for the user previously created in this module\nProvide the one-time password for the username\nSet a new password for the user\nAfter successful login, on the Identity Center portal page, select the Management console link for the operatorAccessPermissionSet role\nAfter successfully logging into the Management Console, navigate to the CloudWatch Log groups page and confirm that you can list existing OperationsLogGroup log groups and successfully create new log streams in them\nüîí Security Note: Regularly review and audit your permission sets and group assignments to ensure users have the appropriate level of access to AWS resources.\nThis module demonstrates how AWS IAM Identity Center works with customer managed policies that you create in your AWS account. Although the module created a CMP and permission set and provided it in a single account, you can create CMPs with the same name in all member accounts and use the same operatorAccessPermissionSet permission set and provide it across all your member accounts.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/5-provision-permission-sets/",
	"title": "Provision Permission Sets",
	"tags": [],
	"description": "",
	"content": "Provision Permission Sets ‚ÑπÔ∏è Information: By default, when you create a permission set, it is not yet provisioned (not applied to any AWS account).\nTo activate a permission set within an AWS account, you need to grant IAM Identity Center access to users or groups in that account and then assign the permission set to those users or groups.\nSteps Navigate to the IAM Identity Center Console, select AWS accounts, and choose the account where you want users to have access.\nClick Assign users or groups. On the Select users and groups page: Choose the Groups tab Select the Administrators group Click Next On the Select permission sets page: Under Permission sets, select AdministratorAccess Click Next On the Review and submit page: Review the information you provided Click Submit ‚ÑπÔ∏è Information: You will see a confirmation page indicating that the AWS account assignment has been successfully created.\n‚ÑπÔ∏è Information: IAM Identity Center links the user group with the permission set and assigns it to the selected AWS account(s).\nYou will see a page with a green banner confirming that the provisioning process completed successfully.\nProvision Another Permission Set for the Same Account In the IAM Identity Center Console, go to AWS accounts and select the same account used earlier.\nClick Assign users or groups. On the Select users and groups page: Choose the Groups tab Select the readOnly group Click Next On the Select permission sets page: Under Permission sets, select readOnly Click Next On the Review and submit page: Review your selections Click Submit üí° Pro Tip: Check the IAM roles that appear under the AWS account where you provisioned the permission sets.\nThis confirms that the permissions have been applied correctly and IAM Identity Center successfully created the corresponding IAM roles within that account.\nüîí Security Note: Group-based permission assignments make access management more efficient and easier to maintain as your organization grows.\nThis is the best practice for implementing least privilege access and following Zero Trust principles.\nWhen your organization‚Äôs structure changes, you only need to update group memberships rather than adjusting permissions for each individual user.\n‚ÑπÔ∏è Information: Once a permission set is provisioned, IAM Identity Center automatically creates and manages the corresponding IAM roles in each assigned AWS account.\nThis greatly simplifies large-scale access management and ensures consistency across your entire AWS Organization.\nYou have successfully provisioned Permission Sets for your AWS account.\nNext, let‚Äôs move on to verifying the configuration.\n"
},
{
	"uri": "//localhost:1313/%CC%805-iam-identity-center-identity-store-apis/",
	"title": "IAM Identity Center Identity Store APIs",
	"tags": [],
	"description": "",
	"content": "Overview This guide explains how to manage and audit AWS IAM Identity Center users and groups at scale using Identity Store APIs. These APIs allow you to automate processes for:\nProvisioning and deprovisioning users and groups Adding new members to groups or removing them Querying information about users and groups in IAM Identity Center Updating information about these users and groups Determining which users are members of which groups Prerequisites Before starting, you should have the following prerequisites:\nAn Organization in AWS Organizations Administrative access to AWS IAM Identity Center Python version 3.10.5 or later AWS CLI AWS SDK for Python (Boto3) Git Environment Setup Clone the repository:\ngit clone https://github.com/aws-samples/iam-identitycenter-identitystoreapi-operations This repository contains the sample script identitystore_operations.py that will be used to perform identity store operations. The script utilizes Python SDKs. You can refer to the boto3 documentation for identity store operations.\n‚ÑπÔ∏è Information: The Identity Store APIs enable programmatic management of users and groups in IAM Identity Center, supporting large-scale identity management automation.\nExample: Creating a Group Here\u0026rsquo;s an example of using the create_group method to create a group in Identity Store using the Python SDK:\nresponse = client.create_group( IdentityStoreId=\u0026#39;string\u0026#39;, DisplayName=\u0026#39;string\u0026#39;, Description=\u0026#39;string\u0026#39; ) The create_group method accepts the following parameters:\nParameters:\nIdentityStoreId (string) \u0026ndash; [REQUIRED] The globally unique identifier for the identity store. DisplayName (string) \u0026ndash; A string containing the name of the group. This value is typically displayed when the group is referenced. Description (string) \u0026ndash; A string containing the description of the group. üí° Pro Tip: Always refer to the boto3 documentation for detailed information about request syntax, response syntax, and exceptions for API operations.\nTest Setup In this step, you\u0026rsquo;ll run the Python script identitystore_operations.py and view all the supported options available in the script.\nNote\nIf you\u0026rsquo;re not using the default profile, make sure to configure your shell session with environment variables before running the script.\npython identitystore_operations.py ‚Äîh You should see output like the following:\nSample Output:\nusage: identitystore_operations.py [-h]\r{create_user,create_group,adduser_to_group,delete_group,list_members,list_membership}\r...\rpositional arguments:\r{create_user,create_group,adduser_to_group,delete_group,list_members,list_membership}\roptions:\r-h, --help show this help message and exit As you can see from the output above, this script supports multiple IdentityStore operations such as Create_user, Create_group, delete_group, List_members, etc.\nUse Case Prerequisites In this section, you\u0026rsquo;ll use the Python script to create two SSO groups (AWS_Data_Science \u0026amp; AWS_Applied_Scientists) that will be used in subsequent steps.\nYou\u0026rsquo;ll need the Identity Store ID to proceed with the remaining steps.\nSign in to your AWS account. Navigate to AWS IAM Identity Center settings Copy the Identity store id from the identity store tab. This will be used in the next step. Run the following command to create the AWS_Data_Science group:\npython identitystore_operations.py create_group --identitystoreid d-123456a7890 --groupname AWS_Data_Science --description \u0026#34;My Data Science group\u0026#34; Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nGroup:AWS_Data_Science with GroupId:94482488-3041-7026-18f3-be45837cd0e4 created successfully Similarly, run the following command to create the AWS_Applied_Scientists group:\npython identitystore_operations.py create_group --identitystoreid d-123456a7890 --groupname AWS_Applied_Scientists --description \u0026#34;Applied Scientist group\u0026#34; Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nGroup:AWS_Applied_Scientists with GroupId:94482488-3041-7026-18f3-be45837cd0e4 created successfully ‚ö†Ô∏è Warning: Always verify the Identity Store ID from your AWS IAM Identity Center console before running API operations. Using an incorrect ID will result in errors.\nAWS IAM Identity Center User and Group API Operations In this section, you\u0026rsquo;ll use the Python script to create users and update users\u0026rsquo; group memberships.\nCreate User and Add to a Group In this step, you\u0026rsquo;ll create a user and add the newly created user to an existing group. You can check the Python code of the create_user function (lines # 9 to # 77) in the identitystore_operations.py Python script for details. This function calls the create_user and create_group_membership APIs for this operation. The Request syntax, Response syntax, and exceptions for these API operations can be found in the boto3 documentation.\nThis function creates a user and adds the user to a group if the group exists.\nIf the group doesn\u0026rsquo;t exist, this function will just create the user and skip adding the user to the group.\nRequired parameters \u0026ndash;identitystoreid - Identity Store Id of the SSO configuration \u0026ndash;username - User Name for the user \u0026ndash;givenname - First Name for the user \u0026ndash;familyname - Last Name for the user\nOptional parameters \u0026ndash;groupname - Name of the SSO group\nHere\u0026rsquo;s an example of how you can create a new user \u0026ldquo;John Doe\u0026rdquo; in the IAM Identity Center\u0026rsquo;s identity store and add the user to the existing \u0026ldquo;AWS_Data_Science\u0026rdquo; group.\npython identitystore_operations.py create_user --identitystoreid d-123456a7890 --username johndoe --givenname John --familyname Doe --groupname AWS_Data_Science Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUser:johndoe with UserId:94482488-3041-7026-18f3-be45837cd0e4 created successfully\rUser:johndoe added to Group:AWS_Data_Science successfully üîí Security Note: Always follow the principle of least privilege when assigning users to groups in IAM Identity Center. Only grant access that\u0026rsquo;s necessary for users to perform their job functions.\nUpdate User\u0026rsquo;s Group Membership Now, suppose the data specialist transitions to an applied scientist role and needs access to additional AWS applications and resources. Previously, you would have had to manually update their information and add them to the \u0026ldquo;AWS_Applied_Scientists\u0026rdquo; group so they have the right access. Now, your automation can update the user and provide them the access they need. Refer to the Python code of the adduser_to_group function (lines #108 to #154) in the Python script for details. This function calls the get_group_id, get_user_id, and create_group_membership APIs for this operation. The Request syntax, Response syntax, and exceptions for these API operations can be found in the boto3 documentation.\nHere\u0026rsquo;s an example of how the previously created user \u0026ldquo;John Doe\u0026rdquo; can be added to the \u0026ldquo;AWS_Applied_Scientists\u0026rdquo; group:\npython identitystore_operations.py adduser_to_group --identitystoreid d-123456a7890 --groupname AWS_Applied_Scientists --username johndoe Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUser:johndoe added to Group:AWS_Applied_Scientists successfully üí° Pro Tip: Use automation for group membership management to ensure consistency and reduce human error, especially in environments with high user turnover or role changes.\nAWS IAM Identity Center User and Group Audit Operations In this section, you\u0026rsquo;ll use the Python script to audit user and group memberships.\nFind Members of a Specific Group Here\u0026rsquo;s an example of how you can find all members of the \u0026ldquo;AWS_Applied_Scientists\u0026rdquo; group. Refer to the list_members function in the Python code (#199 to #232) in the script for details. This function calls the get_group_id and list_group_memberships APIs for this operation. The Response syntax and exceptions for these API operations can be found in the boto3 documentation.\npython identitystore_operations.py list_members --identitystoreid d-123456a7890 --groupname AWS_Applied_Scientists Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUserName:johndoe,Display Name: John Doe Find User\u0026rsquo;s Group Membership Here\u0026rsquo;s an example of how you can find the group membership of a specific user \u0026ldquo;johndoe\u0026rdquo;. Refer to the list_membership function in the Python code (#235 to #276) in the script for details. This function makes API calls to get_user_id, list_group_memberships_for_member \u0026amp; describe_group for this operation. The Response syntax and exceptions for these API operations can be found in the boto3 documentation.\npython identitystore_operations.py list_membership --identitystoreid d-123456a7890 --username johndoe Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUser :johndoe is a member of the following groups\rAWS_Data_Science\rAWS_Applied_Scientists ‚ÑπÔ∏è Information: Regular auditing of group memberships is an essential security practice. Use these commands to create automated reports and verify that users have appropriate permissions.\nüîí Security Note: Implement a routine audit process to regularly review group memberships, especially for groups with elevated permissions. This helps maintain the principle of least privilege and ensures compliance with security policies.\n"
},
{
	"uri": "//localhost:1313/6-clean-up/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "Resource Cleanup After completing this workshop, you need to delete the AWS resources you created in your account to avoid unnecessary charges.\nRemoving CloudFormation Resources After completing the workshop, delete the CloudFormation stack that was created in the \u0026ldquo;Testing User and Group-based Access\u0026rdquo; section.\n‚ö†Ô∏è Warning: Deleting a CloudFormation stack will remove all resources created by that stack. Ensure you no longer need these resources before proceeding.\nTo delete the CloudFormation stack:\nNavigate to the CloudFormation service page in the AWS Management Console Select the stack (with the name you entered) Click the Delete button Cleaning Up IAM Identity Center Resources ‚ÑπÔ∏è Information: Deleting the IAM Identity Center configuration will remove all users, groups, and permission configurations established within Identity Center.\nTo clean up all IAM Identity Center resources:\nNavigate to the IAM Identity Center Console Select the AWS Region recommended by the AWS Team if this is part of an AWS event, or the Region you configured if you\u0026rsquo;re performing this workshop on your own Select Settings from the left navigation menu On the Settings page, select the Management tab Click the Delete button in the \u0026ldquo;Delete IAM Identity Center configuration\u0026rdquo; section Enter the instance ID in the text field and click the Confirm button in the \u0026ldquo;Confirm delete settings\u0026rdquo; dialog box üí° Pro Tip: Before deleting your IAM Identity Center configuration, make sure you\u0026rsquo;ve documented any configurations you might want to reference in the future, as configurations cannot be recovered once deleted.\nüîí Security Note: After cleanup, verify that all permission sets and assignments have been properly removed to ensure no lingering access remains in your AWS environment.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/6-test/",
	"title": "Verify Access Permissions",
	"tags": [],
	"description": "",
	"content": "Verify Access Based on Users, Groups, and Permission Sets ‚ÑπÔ∏è Information: In this section, you will validate your IAM Identity Center configuration by confirming that users and groups have the correct permissions applied across AWS accounts.\nThis is done by deploying an AWS CloudFormation stack that creates AWS resources for testing.\nThe CloudFormation template provisions resources such as two VPCs (public and private subnets), EC2 instances, and several VPC Security Groups.\nDeploy the CloudFormation Template Download the Template Navigate to the CloudFormation console Click Create stack and choose With new resources (standard) On the Create stack page: Select Template is ready under Prepare template Choose Upload a template file under Template source Click Choose file and select the template you downloaded in Step 1 On the Specify stack details page: Enter a stack name, for example: iam-identitycenter-validation-setup Leave the LatestAmiId parameter as default and click Next Leave all default settings on the Configure stack options page. Scroll down and click Next On the Review page, scroll down and click Submit ‚ÑπÔ∏è Information: The CloudFormation stack deployment will take approximately 5 minutes to complete.\nYou can confirm completion when the status changes to CREATE_COMPLETE.\nValidate Access ‚ö†Ô∏è Warning: For best results, perform the following validation steps in a private/incognito browser window or a separate browser to avoid session conflicts.\nVerify Administrator Access Sign in to the AWS Access Portal using the portal URL saved when you created adminUser.\nEnter the username of the user you created earlier in this module.\nProvide the one-time password for the user.\nSet a new password for the user.\nAfter signing in successfully, on the AWS Access Portal page, select the Management console link under the AdministratorAccess role.\nOnce logged in to the Management Console, navigate to the EC2 console.\nSelect a running instance.\nFrom the Instance state dropdown menu, choose Stop instance.\n‚ÑπÔ∏è Information: You should see a page with a green banner confirming that the instance has been stopped successfully.\nThis demonstrates that the Administrator user can perform actions that modify resource states.\nSign out of both the AWS Management Console and the AWS Access Portal. Verify ReadOnly Access Sign in to the AWS Access Portal using the readOnlyUser.\nProvide the one-time password for the username.\nSet a new password for the user.\nAfter logging in successfully, on the AWS Access Portal page, select the Management console link under the readOnly role.\nOnce inside the Management Console, navigate to the EC2 console.\nSelect a running instance.\nFrom the Instance state dropdown menu, choose Stop instance.\nüîí Security Note: You will see a page with a red banner displaying ‚ÄúFailed to stop the instance.‚Äù\nThis confirms that the read-only user cannot perform state-changing actions, validating that the principle of least privilege is functioning correctly.\nüí° Pro Tip: Testing access in this way helps verify that your IAM Identity Center configuration works as intended and that permission sets are correctly applied to different user groups.\nIn production environments, it‚Äôs a good practice to perform such validation regularly as part of your security audit process to ensure access permissions remain correctly enforced.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]