[
{
	"uri": "//localhost:1313/",
	"title": "Using AWS IAM Identity Center for Robust Identity Management",
	"tags": [],
	"description": "",
	"content": "Using AWS IAM Identity Center for Robust Identity Management Introduction ‚ÑπÔ∏è Information: This workshop is designed to help you become familiar with AWS IAM Identity Center (formerly AWS Single Sign-On) to effectively manage your organization\u0026rsquo;s employee identities across multiple AWS accounts.\nScenario Your company is new to cloud computing and planning to build systems on AWS. The company wants to enforce robust security access controls in a centralized and scalable manner.\nAs a cloud administrator, you\u0026rsquo;ve been tasked with setting up access to AWS accounts for company employees following the principle of least privilege. During configuration, you\u0026rsquo;re responsible for setting up IAM Identity Center and providing access to AWS accounts based on users\u0026rsquo; group membership and project/team roles.\nOverview Level: Intermediate Duration: 1-3 hours NIST Cybersecurity Framework (CSF) Function: Identify AWS Cloud Adoption Framework (CAF) Component: Directive Cost: üí° Pro Tip: There are no costs associated with IAM Identity Center and AWS Organizations. For other services, most costs incurred in this workshop are covered under the free tier for specific services in your AWS account (e.g., Amazon EC2). However, some costs related to data storage (e.g., AWS CloudTrail logs) may be incurred. You should clean up your environment by following the instructions in the Cleanup section after completing the workshop to avoid additional costs.\nSupported Regions: ‚ÑπÔ∏è Information: It\u0026rsquo;s recommended to run this workshop in the us-east-1 Region.\nTarget Audience: Cloud and IT Administrators Prerequisites: AWS account not yet part of AWS Organizations IAM user with administrative permissions for that account ‚ö†Ô∏è Warning: Please launch an Amazon EC2 instance in your new account a few hours before starting this workshop to ensure your account is active and ready for the workshop. If you\u0026rsquo;re attending this workshop at an AWS event such as re:Invent or re:Inforce, you\u0026rsquo;ll be provided with AWS credits to cover workshop-related costs.\nüîí Security Note: IAM Identity Center provides centralized access management, helping minimize security risks associated with managing multiple credentials across multiple AWS accounts. Implementing IAM Identity Center is an important part of a Zero Trust strategy and adheres to the principle of least privilege.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/1-create-aws-account/",
	"title": "Create AWS Account in AWS Organizations",
	"tags": [],
	"description": "",
	"content": "Creating AWS Accounts in AWS Organization In this step, you will practice creating AWS accounts for Security, Shared Services, Logging, and Application within the AWS Organization service. AWS accounts created within the AWS Organization can only be accessed using the IAM Role or root user information.\nContents Creating AWS Accounts in AWS Organization Contents Create AWS Account in AWS Organization Create AWS Account in AWS Organization Go to the AWS Management Console and search for the AWS Organizations service.\nIn the AWS Organizations Console, click on Add an AWS account.\nSelect Create an AWS account and provide the following details:\nAWS account name: Logging Email address of the account\u0026rsquo;s owner: example+lab12Logging@amazon.com.vn Note: To create multiple AWS accounts with the same email, you can modify your email by adding a \u0026quot;+\u0026quot; followed by a description.\nIAM role name: Leave the default as OrganizationAccountAccessRole. This role name will be used to access your AWS member account through the [role switch] method. Review the provided information and then select Create AWS account.\nRepeat the above steps to create accounts for Security, Shared Services, and Application. Depending on individual or business requirements, you can create as many accounts as needed.\nNote: If the email address used to create your AWS Account already exists, AWS will respond with the reason \u0026ldquo;EMAIL ALREADY EXISTS\u0026rdquo; in the Failure reason section under Requests.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/",
	"title": "Preparation steps",
	"tags": [],
	"description": "",
	"content": "Preparation Steps for AWS Landing Zone Deployment Overview This guide outlines the setup process for creating a Landing Zone using AWS Organizations. It will help you structure your AWS accounts and resources for a well-architected multi-account environment. The primary focus is to create and organize four Organizational Units (OUs), establish core accounts, and implement cross-account communication strategies.\nBy the end of this exercise, you will have:\nA functional AWS Organization with: Four Organization Units (OUs): Security, Shared Services, Logging, and Application. Each OU will group its designated AWS accounts. AWS Accounts created with the following purposes: Security Account for centralized security management. Shared Services Account for shared networking and management services. Logging Account to consolidate AWS CloudTrail, Config, and VPC Flow Logs. Application Account for specific business unit workloads. These foundational steps will enable governance, security controls, and cost management within your AWS environment.\nTarget Accounts and Resources Logging Account:\nThis serves as a centralized repository for storing Amazon VPC Flow Logs, AWS CloudTrail logs, and AWS Config data. Security Account:\nHost a GuardDuty master account, manage AWS Security Hub, and aggregate security alerts. Shared Services Account:\nProvision a shared VPC for resource access across accounts. Establish AWS Direct Connect, Transit Gateway, and other shared network resources. Application Accounts:\nBusiness unit-specific accounts for production and non-production workloads. Analytics, Dev/Test, and other application-specific resources. Lab Architecture Diagram Steps to Implement Create AWS Account in AWS Organization:\nEstablish the core accounts (Security, Shared Services, Logging, and Application) under your AWS Organization. Use the AWS Management Console or AWS CLI to automate account creation and structure. Setting up Organization Unit:\nConfigure Organization Units (OUs) for logical grouping. Create policies to enforce specific security or compliance requirements for each OU. Invite Existing AWS Accounts to the AWS Organization:\nLink any existing accounts to the AWS Organization using an invite process. Validate and assign each account to its corresponding OU. Access Member Accounts in the Organization:\nEnable cross-account access using IAM roles. Set up AWS SSO or IAM Role Switch to streamline management and operational tasks across accounts. Important Considerations Cost Optimization: Ensure that each account\u0026rsquo;s usage is tracked separately to optimize billing and monitoring. Security Posture: Implement security controls, such as SCPs (Service Control Policies) and centralized logging, to maintain compliance. Networking: Plan for network isolation and interconnectivity using VPC Peering, Transit Gateway, and Direct Connect configurations. Refer to the AWS Landing Zone Documentation for more advanced configurations and best practices.\n"
},
{
	"uri": "//localhost:1313/2-aws-cli-access/",
	"title": "AWS CLI",
	"tags": [],
	"description": "",
	"content": "AWS CLI Access with IAM Identity Center Overview This guide explains how to authenticate and access AWS resources via the AWS Command Line Interface (CLI) when using IAM Identity Center.\n‚ÑπÔ∏è Information: AWS Command Line Interface (CLI) provides the ability to interact with AWS services through the command line. When using IAM Identity Center, you can securely authenticate and access AWS resources across multiple accounts.\nAuthentication Overview with IAM Identity Center When using AWS IAM Identity Center, you can authenticate to the AWS CLI using:\nIAM Identity Center\u0026rsquo;s integrated directory An external identity provider connected to IAM Identity Center After authentication, IAM Identity Center maps your login credentials to the corresponding IAM role to execute AWS CLI commands with appropriate permissions.\nCredential Refresh Methods ‚ÑπÔ∏è Information: There are two main methods for obtaining and refreshing temporary credentials for IAM Identity Center users:\n1. Manual Credential Refresh This method allows you to obtain temporary credentials for a specific IAM role associated with a permission set in an AWS account. The process:\nLog in to the AWS access portal Select the AWS account and permission set you need to access Copy the provided AWS CLI commands Paste and execute the commands in your terminal to set up credentials ‚ö†Ô∏è Warning: Temporary credentials have a limited lifespan (typically 1 hour). You need to repeat this process when credentials expire.\n2. Automatic Credential Refresh (Recommended) üí° Pro Tip: This method uses the Open ID Connect (OIDC) standard with Device Code Authorization, providing a more seamless and secure authentication experience.\nThe process:\nConfigure AWS CLI with the aws configure sso command Provide the IAM Identity Center URL and AWS Region Authenticate through a web browser Select the AWS account and IAM role to access AWS CLI will automatically refresh credentials when needed üîí Security Note: The automatic refresh method not only improves user experience but also enhances security by:\nEliminating the need to copy/paste sensitive credentials Automatically managing credential lifecycle Supporting integrated multi-factor authentication (MFA) Adhering to Zero Trust principles with short-lived sessions ‚ÑπÔ∏è Information: From AWS CLI v2.9.0 and above, you can use the SSO configuration file (~/.aws/config) to store multiple profiles for different AWS accounts and permission sets, allowing quick switching between different roles.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/2-configure-ou/",
	"title": "Setting up the Organization Unit",
	"tags": [],
	"description": "",
	"content": "Setting Up Organization Units In this step, you will practice setting up the Organization Units for the AWS accounts created in the previous section. The Organization Units include Security, Shared Services, Logging, and Application. These units will be situated within the Root, where all the OUs and AWS accounts are located.\nContents Setting Up Organization Units Contents Create Organization Unit Move AWS Accounts to Respective Organization Unit Create Organization Unit Open the AWS Management Console and search for the AWS Organizations service.\nSelect the Root, click on Actions, and then choose Create new under the Organizational Unit section.\nOn the Create organizational unit in Root page:\nIn the Details section, provide a name for the OU (For example: Logging Unit). Review the information and click Create organizational unit.\nRepeat the above steps for the remaining Organization Units.\nMove AWS Accounts to Respective Organization Unit Go to the AWS Management Console and find the AWS Organizations service using the search bar.\nCheck the AWS account you wish to move (For instance: Logging), click on Actions, and then select Move under AWS Account.\nTick the appropriate OU (Example: Logging Unit) and click Move AWS account.\nRepeat the above steps for the remaining AWS and Organization Unit accounts:\nMove the Security Account to the Security Unit Move the Shared Services Account to the Shared Services Unit Move the Application Account to the Application Unit "
},
{
	"uri": "//localhost:1313/1-prerequisite/3-invite-aws-account/",
	"title": "Invite AWS Account to AWS Organization",
	"tags": [],
	"description": "",
	"content": "Adding an AWS Account to Organizations Step 1: Invite an Existing AWS Account Go to the AWS Management Console and search for the AWS Organizations service in the search bar. Select Add an AWS account. Choose Invite an existing AWS account. Enter the email address or Account ID of the AWS Account you wish to add to the Organization, e.g., fcj@amazon.com.vn or 888800009920. Click on Send invitation. Step 2: Check Your Invitation to Join Organizations In the left pane, select Invitations. You will see the Account ID you added in step 1, with the status OPEN. Step 3: Accept an Invitation to Join Organizations Access the AWS Management Console of the Account you added in step 1 and find the AWS Organizations service in the search bar. On the right side of the screen, select the invitation View 1 invitation. Note that the AWS Organization service is free of charge. Select Accept invitation. Result: Please note that you will only see this invitation if the AWS Account has not already joined any AWS Organizations. Step 4: Check AWS Organizations Go back to the AWS Account from step 1 and verify if the Account added in step 3 has joined Organizations. Here, you can view the entire structure of Organizations, including Organization Units with member accounts and management accounts. The management account will serve as the main account to manage and access member accounts through the switch role function. Congratulations, the AWS Account has been successfully added with join date details.\n"
},
{
	"uri": "//localhost:1313/3-using-time-based-access-control/",
	"title": "Time-based access control",
	"tags": [],
	"description": "",
	"content": "There may be scenarios where you want to provide access to specific users or groups for a defined time period, such as granting permissions to Security Auditors during audit periods or to consultants for the duration of a project. In these situations, you can use permission sets with inline policies containing conditions to implement time-based access control.\n‚ÑπÔ∏è Information: Time-based access control allows you to automatically grant and revoke permissions based on date and time conditions, reducing the operational overhead of managing temporary access.\nThis guide explores the case of providing temporary access to AWS accounts for Security Auditors. To implement this requirement with time-based access control, you\u0026rsquo;ll complete the following steps:\nCreate a Permission Set with necessary access for Security Auditors as an inline policy with time-based access control conditions Create a Group for Security Auditors Assign users to the Security Auditors Group Assign access to AWS Accounts for the Security Auditors group with the newly created permission set Creating a Permission Set Navigate to the IAM Identity Center Console\nSelect the AWS Region recommended by the AWS Team if this is part of an AWS Event. If you\u0026rsquo;re doing this on your own, select the Region where you intend to configure the rules.\nClick on Permission sets in the left menu under the Multi-account permissions section and click the Create permission set button.\nOn the Select permission set type page:\nSelect the Custom permission set radio button and click Next. On the Specify policies page:\nExpand the Inline Policy section, then delete the existing braces. Copy and paste the following permission policy into the text area: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;acm:Describe*\u0026#34;, \u0026#34;acm:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34;, \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:GetTrailStatus\u0026#34;, \u0026#34;cloudtrail:ListTags\u0026#34;, \u0026#34;cloudtrail:LookupEvents\u0026#34;, \u0026#34;cloudwatch:Describe*\u0026#34;, \u0026#34;cloudwatch:ListTagsForResource\u0026#34;, \u0026#34;config:BatchGetAggregateResourceConfig\u0026#34;, \u0026#34;config:BatchGetResourceConfig\u0026#34;, \u0026#34;config:Deliver*\u0026#34;, \u0026#34;config:Describe*\u0026#34;, \u0026#34;config:Get*\u0026#34;, \u0026#34;config:List*\u0026#34;, \u0026#34;detective:GetGraphIngestState\u0026#34;, \u0026#34;detective:ListGraphs\u0026#34;, \u0026#34;detective:ListMembers\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:Get*\u0026#34;, \u0026#34;guardduty:DescribePublishingDestination\u0026#34;, \u0026#34;guardduty:Get*\u0026#34;, \u0026#34;guardduty:List*\u0026#34;, \u0026#34;iam:GenerateCredentialReport\u0026#34;, \u0026#34;iam:GenerateServiceLastAccessedDetails\u0026#34;, \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;inspector:Describe*\u0026#34;, \u0026#34;kms:Describe*\u0026#34;, \u0026#34;kms:Get*\u0026#34;, \u0026#34;kms:List*\u0026#34;, \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetResourcePolicy\u0026#34;, \u0026#34;secretsmanager:List*\u0026#34;, \u0026#34;securityhub:Describe*\u0026#34;, \u0026#34;securityhub:Get*\u0026#34;, \u0026#34;securityhub:List*\u0026#34;, \u0026#34;trustedadvisor:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;DateGreaterThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-26T00:00:00Z\u0026#34; }, \u0026#34;DateLessThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-27T23:59:59Z\u0026#34; } } } ] } Click Next\nOn the Specify permission set details page:\nProvide a name for the permission set, e.g., secAuditorTimeBased Leave the remaining fields [Description, Session Duration, Relay state, and Tags] as default and click Next On the Review and create page:\nReview the details provided in the previous steps Click the Create button üîí Security Note: The time-based condition in this policy uses the global condition key aws:CurrentTime that evaluates against the current date and time. The dates in the policy should be in ISO 8601 format with UTC timezone.\nCreating a Group Let\u0026rsquo;s create a new Group named securityAuditors:\nNavigate to the IAM Identity Center Console\nSelect Groups under the Workplace pool section and click Create Group.\nOn the Create group page:\nProvide Group Name: securityAuditors Provide Description, e.g., Group for security Auditors Click Create group Creating a User and Adding to the Group For this module, we\u0026rsquo;ll create a new user: secAuditUser\nNavigate to the IAM Identity Center Console\nSelect Users under the Workplace pool section and click Add User.\nOn the Add User page:\nProvide Username, e.g., secAuditUser For Password, select the Generate a one-time password that you can share with the user radio button Provide Email Address, using the format email+secaudit@domain.com Confirm the email address provided in the previous field Provide First name: secAudit Provide Last name: user Leave Display name as entered and click Next On the Add users to groups - optional page:\nSelect the SecurityAuditors Group and click Next On the Review and add user page:\nReview the information provided in the previous steps and click Add user A pop-up window will appear with a One-time password. Copy the information using the Copy button and save it for later use in the workshop.\nüí° Pro Tip: When working with temporary access, it\u0026rsquo;s a good practice to create functional groups that reflect job roles or responsibilities rather than creating groups for individuals. This approach simplifies access management as people transition between roles.\nAssigning Permission Set to AWS Account Navigate to the IAM Identity Center Console, select AWS accounts under the Multi-account permissions section\nSelect the account you want users to have access to\nClick Assign users or groups\nOn the Assign users and Group to AccountName page:\nSelect Groups, select securityAuditors and click Next On the Select permission sets page:\nUnder Permission sets, select secAuditorTimeBased and click Next On the Review and submit page:\nReview the information and click Submit IAM Identity Center will associate the User group with the Permission set and assign it to the selected AWS Account. You\u0026rsquo;ll see a page with a green banner.\nVerifying Access Note: For a better experience, you should perform the following verification steps in private browsing mode or a different web browser\nLog in to the AWS access Portal using the User portal URL saved when creating secAuditUser\nProvide the username for the user previously created in this module\nProvide the one-time password for the username\nSet a new password for the user\nAfter successful login, on the SSO portal page, select the Management console link for the secAuditorTimeBased role\nAfter successfully logging into the Management Console, navigate to the EC2 console page and confirm that you can list all instances by selecting Instances in the left menu\n‚ÑπÔ∏è Information: The secAuditorTimeBased permission set includes ec2:Describe* permissions, which allow the user to view EC2 resources but not modify them‚Äîperfect for audit-related activities.\nTo simulate access control for Security Auditors, let\u0026rsquo;s update the Permission set and provision it again in our account. We\u0026rsquo;ll simulate this by selecting a timeframe in the past (2022-07-04).\nNavigate to the IAM Identity Center Console\nClick on Permission sets in the left menu and select the secAuditorTimeBased permission set\nEdit the inline policy by clicking the Edit button\nCopy and replace the permission policy with the code below\nThe only change in the policy is the date/time values occurring in the past \u0026ldquo;2022-07-04T00:00:00Z\u0026rdquo; \u0026ldquo;2022-07-04T23:59:59Z\u0026rdquo;\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;acm:Describe*\u0026#34;, \u0026#34;acm:List*\u0026#34;, \u0026#34;cloudtrail:Describe*\u0026#34;, \u0026#34;cloudtrail:Get*\u0026#34;, \u0026#34;cloudtrail:GetTrailStatus\u0026#34;, \u0026#34;cloudtrail:ListTags\u0026#34;, \u0026#34;cloudtrail:LookupEvents\u0026#34;, \u0026#34;cloudwatch:Describe*\u0026#34;, \u0026#34;cloudwatch:ListTagsForResource\u0026#34;, \u0026#34;config:BatchGetAggregateResourceConfig\u0026#34;, \u0026#34;config:BatchGetResourceConfig\u0026#34;, \u0026#34;config:Deliver*\u0026#34;, \u0026#34;config:Describe*\u0026#34;, \u0026#34;config:Get*\u0026#34;, \u0026#34;config:List*\u0026#34;, \u0026#34;detective:GetGraphIngestState\u0026#34;, \u0026#34;detective:ListGraphs\u0026#34;, \u0026#34;detective:ListMembers\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;ec2:Get*\u0026#34;, \u0026#34;guardduty:DescribePublishingDestination\u0026#34;, \u0026#34;guardduty:Get*\u0026#34;, \u0026#34;guardduty:List*\u0026#34;, \u0026#34;iam:GenerateCredentialReport\u0026#34;, \u0026#34;iam:GenerateServiceLastAccessedDetails\u0026#34;, \u0026#34;iam:Get*\u0026#34;, \u0026#34;iam:List*\u0026#34;, \u0026#34;inspector:Describe*\u0026#34;, \u0026#34;kms:Describe*\u0026#34;, \u0026#34;kms:Get*\u0026#34;, \u0026#34;kms:List*\u0026#34;, \u0026#34;s3:Get*\u0026#34;, \u0026#34;s3:List*\u0026#34;, \u0026#34;secretsmanager:DescribeSecret\u0026#34;, \u0026#34;secretsmanager:GetResourcePolicy\u0026#34;, \u0026#34;secretsmanager:List*\u0026#34;, \u0026#34;securityhub:Describe*\u0026#34;, \u0026#34;securityhub:Get*\u0026#34;, \u0026#34;securityhub:List*\u0026#34;, \u0026#34;trustedadvisor:Describe*\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;DateGreaterThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-04T00:00:00Z\u0026#34; }, \u0026#34;DateLessThan\u0026#34;: { \u0026#34;aws:CurrentTime\u0026#34;: \u0026#34;2022-07-04T23:59:59Z\u0026#34; } } } ] } Save the changes to the Permission set, which provisions the permission set again to the AWS Account\nLog back into the AWS access portal by following the steps and verify access to EC2 instances. You\u0026rsquo;ll see that secAuditUser no longer has permission to list EC2 instances.\n‚ö†Ô∏è Warning: When using time-based access control, be aware of timezone differences. AWS uses UTC for time-based conditions, so adjust your dates and times accordingly to avoid unexpected access denials.\nüí° Pro Tip: For recurring access needs, consider implementing an automated solution using AWS Lambda functions to update the time-based conditions in your permission sets based on a schedule, rather than manually updating policies.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/4-switch-role/",
	"title": "Access member account in Organization",
	"tags": [],
	"description": "",
	"content": "Switching Roles for Accessing Member Accounts in AWS Organization In this step, you will use the Switch Role function to access member accounts from your management account.\nContent Switch Role to Member Accounts Created by AWS Organization (Step 1.1) Switch Role to Member Accounts Invited to Join AWS Organization (Step 1.3) A) Switch Role to Member Accounts Created by AWS Organization Log in to your management account:\nUse an IAM User to log in. Go to the AWS Management Console and search for the AWS Organizations service in the search bar. Copy the Account ID (a 12-digit number located below the account name) of the account you wish to access. In the top right corner, next to the account name, click the triangle and select Switch role. Note: If you are using a root account, you won\u0026rsquo;t see the Switch role function. If you\u0026rsquo;re unfamiliar with creating an IAM User (with Admin permission) for this lab, review the article: Manage Access with AWS Identity and Access Management (AWS IAM). Switching Roles:\nGo to Account and paste the Account ID you copied in Step 1 (e.g., 999999999943). In the Role section, enter the role name you used when creating the account in Step 1.1 (e.g., OrganizationAccountAccessRole, recommended by AWS). Optionally, give a Display Name for easy identification. Choose a color for the role\u0026rsquo;s item. Select Switch roles. Result: Congratulations on successfully switching roles!\nVerify if you have permissions for universal services: Explanation: You can easily access the member account created through AWS Organizations and have full admin permissions because:\nThe IAM User used in Step 1 has admin permissions. When creating a new account via AWS Organizations, AWS automatically adds the AdministratorAccess permission to the OrganizationAccountAccessRole role. Check: You are now in the member account with the Display Name: FCJ-Dev. In the search box, type and select the IAM service.\nOn the right, select Roles.\nChoose the Role name: OrganizationAccountAccessRole.\nYou should see the admin permission: AdministratorAccess with the explanation: Provides full access to AWS services and resources.\nExtension: After following the tutorial: Administrating Access with AWS Identity and Access Management (AWS IAM) to create an IAM User for logging into the management account, and assigning admin permission (AdministratorAccess) to perform the switch role, there\u0026rsquo;s no need to add assume role permissions (explained here) since admin permission already encompasses this capability.\nHowever, for the principle of least privilege, consider granting assume role permission only to users who need to switch between accounts. For instance, in an AWS Organization with accounts for Dev, Test, and Production environments, provide the Dev Lead IAM User access to the management account with only assume role permissions for Dev and Test environments. This ensures convenience while maintaining security.\nPractice: Creating User Groups: Within the management account, follow item 2.1 in the article Managing Access Rights with IAM.\nIn Step 4, enter a User Group Name (e.g., DevGroup).\nSelect Create policy, a new window will appear.\nCreating a Customer Managed Policy: Choose a service: type STS, then select STS from the options.\nActions -\u0026gt; Select actions -\u0026gt; type AssumeRole -\u0026gt; in the middle, select AssumeRole.\nResources -\u0026gt; Specific -\u0026gt; Add ARN\nAccount *: enter the member Account ID (the ID copied in Step 1 above, e.g., 999999999943). Role name with path *: enter the role name from Step 1.1 (e.g., OrganizationAccountAccessRole). Select Add. Select Next: Tags.\nSelect Next: Review.\nName *: enter a policy name (e.g., switch_role_999999999943).\nSelect Create policy.\nAttaching the Policy to User Groups: Go back to the Create user group page.\nIn the Attach permissions policies - Optional section, click the refresh icon.\nIn the search box, enter: switch_role_999999999943.\nCheck the box.\nSelect Create Group.\nCreating a User: Follow item 2.2 in the article Managing Access Rights with IAM.\nIn Step 2, enter the User name as DevLead.\nIn Step 3, select the DevGroup.\nComplete the remaining steps and confirm the creation of the new IAM User.\nNow, the IAM User DevLead has been created and assigned the policy switch_role_999999999943 via the group DevGroup.\nNote: While the Users and User Groups interface allows you to assign permissions directly, it\u0026rsquo;s best practice to assign permissions to User Groups first, and then add Users to Groups. This centralized approach simplifies permission management.\nLogging in with the newly created IAM User:\nResult:\nPerforming Switch Role via Member Account:\nNote: You\u0026rsquo;ve logged into the IAM User but are still in the management account. Now, you\u0026rsquo;ll initiate the Switch Role to access the member account.\nRepeat the steps from Step 2. Congratulations on successfully switching roles via the member account (ID: 999999999943) with the IAM User DevLead.\nYou can use the Create an AWS account function to create an account for the test environment and follow Steps 3 to 8 to perform the switch role for the Test environment with the corresponding Account ID.\nB) Switch Role to Member Accounts Invited to Join AWS Organization When reviewing the following items:\n1.1 Create an AWS Account in AWS Organizations 1.3 Invite AWS Account to AWS Organization You\u0026rsquo;ll notice the ability to create an AWS Account in AWS Organizations (Create an AWS account) includes a section to create an IAM role for the management account to access member account resources via Switch Role.\nHowever, this functionality is missing in the process of inviting an AWS Account to an AWS Organization (Invite an existing AWS account). Therefore, you need to manually add an IAM Role for the invited AWS Account.\nCreating a Role with Admin Rights: Use a member account that has been added to the AWS Organization in [1.3].\nGo to the AWS Management Console, search for the IAM service, select Roles, and click Create role.\nSelect AWS account, then Another AWS account.\nEnter the Account ID of the management account in the provided field (e.g., 999999999963).\nClick Next.\nIn the Permissions policies section, enter AdministratorAccess and check the corresponding box.\nClick Next.\nProvide a Role name (e.g., OrganizationAccountAccessRole).\nScroll down and click Create role.\nCopy the Account ID of the member account (e.g., 888800009920) by clicking the square.\nInitiating Switch Role: Log in to your management account (similar to Steps 1 and 2 in Part A).\nClick the triangular bookmark in the top right corner, next to the account name, and select Switch role.\nIn the Account field, paste the copied Account ID from Step 1 (e.g., 888800009920).\nIn the Role field, enter the role name created in Step 1 (e.g., OrganizationAccountAccessRole).\nOptionally, provide a Display Name for easy identification.\nChoose a color for the role\u0026rsquo;s item.\nSelect Switch Role.\nCongratulations! You have successfully switched roles and accessed the member account that was invited to join AWS Organizations.\nConclusion: From Step 1.1 to Step 1.4, it\u0026rsquo;s clear that the management account serves as the admin account in the AWS Organization service, while member accounts are permanent member accounts. To add member accounts to the Organization, there are two approaches:\nCreate a new account using the Create an AWS account function. Invite an existing account using the Invite an existing AWS account function. Additionally, you can switch roles to access member accounts using the Switch Role function. Depending on the approach chosen, the conditions for successful role switching differ:\nWith the Create an AWS account method, switching roles is relatively simple since AdministratorAccess permission is automatically granted to the OrganizationAccountAccessRole during account creation via AWS Organizations. Furthermore, assume role permissions corresponding to the member account ID need to be granted to the IAM User in the management account.\nWith the Invite an existing AWS account method, switching roles requires more steps. You need to manually create the OrganizationAccountAccessRole and assign AdministratorAccess permissions to the management account\u0026rsquo;s account ID. Additionally, assume role permissions corresponding to the member account ID should be granted to the IAM User in the management account.\nRemember that switching roles isn\u0026rsquo;t the only method for accessing member accounts. In the steps outlined in item 2, you\u0026rsquo;ll explore another approach using AWS SSO (Single Sign-On).\n"
},
{
	"uri": "//localhost:1313/4-using-customer-managed-policies/",
	"title": "Customer Managed Policies",
	"tags": [],
	"description": "",
	"content": "When using IAM Identity Center, there are scenarios where you might want to reuse existing IAM permission policies in your permission sets, such as:\nWhen you need the same role across all AWS accounts but require a way to adjust policies in each account to reference their specific resources When you use Identity Center as an alternative to per-account federation, but need to reuse customer managed policies you\u0026rsquo;ve already created Customer Managed Policies (CMP) support with permission sets addresses these requirements. In this guide, you\u0026rsquo;ll walk through a scenario where CMPs can be used to address specific requirements.\n‚ÑπÔ∏è Information: Customer Managed Policies allow you to maintain consistent roles across accounts while still having the flexibility to reference account-specific resources in your policies.\n‚ö†Ô∏è Warning: Before assigning permission sets with IAM policies, you must prepare your member account. The name of the IAM policy in the member account must match case-sensitively with the name of the policy in the management account. IAM Identity Center cannot assign the permission set if the policy doesn\u0026rsquo;t exist in the member account. The permissions granted by the policy don\u0026rsquo;t necessarily need to match exactly between accounts.\nScenario Consider a scenario where an operator group needs access to different member accounts, and their access to those accounts should be limited to specific AWS CloudWatch log groups within those accounts. This requirement can be addressed with Customer Managed Policies (CMPs) where an operatorAccess policy can be created in each AWS account, with the actual policies and permissions/authorizations only allowing CloudWatch operations to be performed on the specified account\u0026rsquo;s log groups. You can then create permission sets attached to the operatorAccess CMP that permit CloudWatch operations on the specified accounts\u0026rsquo; log groups.\nCreating a Customer Managed IAM Policy Navigate to the IAM console to create an IAM policy Select the JSON tab and copy and paste the following policy into the text area Replace \u0026lt;account-id\u0026gt; with the account ID for the account this policy is being created in { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;logs:DescribeLogStreams\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34;, \u0026#34;logs:GetLogEvents\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:us-east-1:\u0026lt;account-id\u0026gt;:log-group:OperationsLogGroup:*\u0026#34; }, { \u0026#34;Action\u0026#34;: [ \u0026#34;logs:DescribeLogGroups\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:logs:us-east-1:\u0026lt;account-id\u0026gt;:log-group::log-stream:*\u0026#34; } ] } Click Next: Tags (Tags are optional) Click Next: Review On the Create Policy page, provide: Policy name: operatorAccess Description (optional but recommended) Click Create Policy üîí Security Note: When creating policies, always follow the principle of least privilege by granting only the permissions necessary to perform the required tasks.\nCreating a Permission Set with Customer Managed Policy Navigate to the IAM Identity Center Console\nSelect the AWS Region recommended by the AWS Team if this is part of an AWS Event, or the Region you intend to configure the rules if you\u0026rsquo;re running this on your own\nClick on Permission sets in the left menu and click the Create permission set button\nOn the Select permission set type page:\nSelect the Custom permission set radio button Click Next On the Specify policies page:\nExpand the \u0026ldquo;Customer managed Policies\u0026rdquo; option Click \u0026ldquo;Attach policies\u0026rdquo; In the text box that displays \u0026ldquo;Enter Policy name(s)\u0026rdquo;, enter \u0026ldquo;operatorAccess\u0026rdquo;. This name must match the name of the policy you created in the Create Customer Managed IAM policy section. Click Next On the Specify permission set details page:\nProvide a name for the permission set, e.g., operatorAccessPermissionSet Leave the remaining fields [Description, Session Duration, Relay state, and Tags] as default Click Next On the Review and create page:\nReview the details provided in the previous steps Click the Create button üí° Pro Tip: Create a standard naming convention for your permission sets that indicates their purpose and level of access. This makes it easier to manage permissions at scale.\nCreating a Group Let\u0026rsquo;s create a new Group named operations:\nNavigate to the IAM Identity Center Console Select Groups under the Workplace pool section and click Create Group On the Create group page: Provide Group Name: operations Provide Description, e.g., Group for cloud operations Click Create group Creating a User and Adding to the Group For this module, we\u0026rsquo;ll create a new user: operationsUser\nNavigate to the IAM Identity Center Console\nSelect Users under the Workplace pool section and click Create User\nOn the Create User page:\nProvide Username, e.g., operationsUser For Password, select the Generate a one-time password that you can share with the user radio button Provide Email Address, using the format email+operations@domain.com, e.g., example+operations@amazon.com Confirm the email address provided in the previous field Provide First name: operations Provide Last name: user Leave Display name as entered Click Next On the Add users to groups - optional page:\nSelect the Operations Group Click Next On the Review and add user page:\nReview the information provided in the previous steps Click Add user A pop-up window will appear with a One-time password. Copy the information using the Copy button and save it for the verification step. Note the User portal URL, Username, and Password\n‚ÑπÔ∏è Information: IAM Identity Center manages user identities separately from IAM users, providing a single place to create and manage user identities for your entire AWS organization.\nAssigning Permission Sets to AWS Accounts Navigate to the IAM Identity Center Console, select AWS accounts\nSelect the account you want users to have access to\nClick Assign users or groups\nOn the Assign users and Group to AccountName page:\nSelect the operations group Click Next On the Select permission sets page:\nUnder Permission sets, select operatorAccessPermissionSet Click Next On the Review and submit page:\nReview the information Click Submit IAM Identity Center will associate the User group with the Permission set and assign it to the selected AWS Account. You\u0026rsquo;ll see a page with a green banner.\nüí° Pro Tip: IAM Identity Center allows you to assign multiple permission sets to the same user or group, giving you flexibility in how you structure your access control.\nVerifying Access Note: For a better experience, you should perform the following verification steps in private browsing mode or a different web browser\nLog in to the AWS Portal using the User portal URL saved when creating operationsUser\nProvide the username for the user previously created in this module\nProvide the one-time password for the username\nSet a new password for the user\nAfter successful login, on the Identity Center portal page, select the Management console link for the operatorAccessPermissionSet role\nAfter successfully logging into the Management Console, navigate to the CloudWatch Log groups page and confirm that you can list existing OperationsLogGroup log groups and successfully create new log streams in them\nüîí Security Note: Regularly review and audit your permission sets and group assignments to ensure users have the appropriate level of access to AWS resources.\nThis module demonstrates how AWS IAM Identity Center works with customer managed policies that you create in your AWS account. Although the module created a CMP and permission set and provided it in a single account, you can create CMPs with the same name in all member accounts and use the same operatorAccessPermissionSet permission set and provide it across all your member accounts.\n"
},
{
	"uri": "//localhost:1313/%CC%805-iam-identity-center-identity-store-apis/",
	"title": "IAM Identity Center Identity Store APIs",
	"tags": [],
	"description": "",
	"content": "Overview This guide explains how to manage and audit AWS IAM Identity Center users and groups at scale using Identity Store APIs. These APIs allow you to automate processes for:\nProvisioning and deprovisioning users and groups Adding new members to groups or removing them Querying information about users and groups in IAM Identity Center Updating information about these users and groups Determining which users are members of which groups Prerequisites Before starting, you should have the following prerequisites:\nAn Organization in AWS Organizations Administrative access to AWS IAM Identity Center Python version 3.10.5 or later AWS CLI AWS SDK for Python (Boto3) Git Environment Setup Clone the repository:\ngit clone https://github.com/aws-samples/iam-identitycenter-identitystoreapi-operations This repository contains the sample script identitystore_operations.py that will be used to perform identity store operations. The script utilizes Python SDKs. You can refer to the boto3 documentation for identity store operations.\n‚ÑπÔ∏è Information: The Identity Store APIs enable programmatic management of users and groups in IAM Identity Center, supporting large-scale identity management automation.\nExample: Creating a Group Here\u0026rsquo;s an example of using the create_group method to create a group in Identity Store using the Python SDK:\nresponse = client.create_group( IdentityStoreId=\u0026#39;string\u0026#39;, DisplayName=\u0026#39;string\u0026#39;, Description=\u0026#39;string\u0026#39; ) The create_group method accepts the following parameters:\nParameters:\nIdentityStoreId (string) \u0026ndash; [REQUIRED] The globally unique identifier for the identity store. DisplayName (string) \u0026ndash; A string containing the name of the group. This value is typically displayed when the group is referenced. Description (string) \u0026ndash; A string containing the description of the group. üí° Pro Tip: Always refer to the boto3 documentation for detailed information about request syntax, response syntax, and exceptions for API operations.\nTest Setup In this step, you\u0026rsquo;ll run the Python script identitystore_operations.py and view all the supported options available in the script.\nNote\nIf you\u0026rsquo;re not using the default profile, make sure to configure your shell session with environment variables before running the script.\npython identitystore_operations.py ‚Äîh You should see output like the following:\nSample Output:\nusage: identitystore_operations.py [-h]\r{create_user,create_group,adduser_to_group,delete_group,list_members,list_membership}\r...\rpositional arguments:\r{create_user,create_group,adduser_to_group,delete_group,list_members,list_membership}\roptions:\r-h, --help show this help message and exit As you can see from the output above, this script supports multiple IdentityStore operations such as Create_user, Create_group, delete_group, List_members, etc.\nUse Case Prerequisites In this section, you\u0026rsquo;ll use the Python script to create two SSO groups (AWS_Data_Science \u0026amp; AWS_Applied_Scientists) that will be used in subsequent steps.\nYou\u0026rsquo;ll need the Identity Store ID to proceed with the remaining steps.\nSign in to your AWS account. Navigate to AWS IAM Identity Center settings Copy the Identity store id from the identity store tab. This will be used in the next step. Run the following command to create the AWS_Data_Science group:\npython identitystore_operations.py create_group --identitystoreid d-123456a7890 --groupname AWS_Data_Science --description \u0026#34;My Data Science group\u0026#34; Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nGroup:AWS_Data_Science with GroupId:94482488-3041-7026-18f3-be45837cd0e4 created successfully Similarly, run the following command to create the AWS_Applied_Scientists group:\npython identitystore_operations.py create_group --identitystoreid d-123456a7890 --groupname AWS_Applied_Scientists --description \u0026#34;Applied Scientist group\u0026#34; Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nGroup:AWS_Applied_Scientists with GroupId:94482488-3041-7026-18f3-be45837cd0e4 created successfully ‚ö†Ô∏è Warning: Always verify the Identity Store ID from your AWS IAM Identity Center console before running API operations. Using an incorrect ID will result in errors.\nAWS IAM Identity Center User and Group API Operations In this section, you\u0026rsquo;ll use the Python script to create users and update users\u0026rsquo; group memberships.\nCreate User and Add to a Group In this step, you\u0026rsquo;ll create a user and add the newly created user to an existing group. You can check the Python code of the create_user function (lines # 9 to # 77) in the identitystore_operations.py Python script for details. This function calls the create_user and create_group_membership APIs for this operation. The Request syntax, Response syntax, and exceptions for these API operations can be found in the boto3 documentation.\nThis function creates a user and adds the user to a group if the group exists.\nIf the group doesn\u0026rsquo;t exist, this function will just create the user and skip adding the user to the group.\nRequired parameters \u0026ndash;identitystoreid - Identity Store Id of the SSO configuration \u0026ndash;username - User Name for the user \u0026ndash;givenname - First Name for the user \u0026ndash;familyname - Last Name for the user\nOptional parameters \u0026ndash;groupname - Name of the SSO group\nHere\u0026rsquo;s an example of how you can create a new user \u0026ldquo;John Doe\u0026rdquo; in the IAM Identity Center\u0026rsquo;s identity store and add the user to the existing \u0026ldquo;AWS_Data_Science\u0026rdquo; group.\npython identitystore_operations.py create_user --identitystoreid d-123456a7890 --username johndoe --givenname John --familyname Doe --groupname AWS_Data_Science Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUser:johndoe with UserId:94482488-3041-7026-18f3-be45837cd0e4 created successfully\rUser:johndoe added to Group:AWS_Data_Science successfully üîí Security Note: Always follow the principle of least privilege when assigning users to groups in IAM Identity Center. Only grant access that\u0026rsquo;s necessary for users to perform their job functions.\nUpdate User\u0026rsquo;s Group Membership Now, suppose the data specialist transitions to an applied scientist role and needs access to additional AWS applications and resources. Previously, you would have had to manually update their information and add them to the \u0026ldquo;AWS_Applied_Scientists\u0026rdquo; group so they have the right access. Now, your automation can update the user and provide them the access they need. Refer to the Python code of the adduser_to_group function (lines #108 to #154) in the Python script for details. This function calls the get_group_id, get_user_id, and create_group_membership APIs for this operation. The Request syntax, Response syntax, and exceptions for these API operations can be found in the boto3 documentation.\nHere\u0026rsquo;s an example of how the previously created user \u0026ldquo;John Doe\u0026rdquo; can be added to the \u0026ldquo;AWS_Applied_Scientists\u0026rdquo; group:\npython identitystore_operations.py adduser_to_group --identitystoreid d-123456a7890 --groupname AWS_Applied_Scientists --username johndoe Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUser:johndoe added to Group:AWS_Applied_Scientists successfully üí° Pro Tip: Use automation for group membership management to ensure consistency and reduce human error, especially in environments with high user turnover or role changes.\nAWS IAM Identity Center User and Group Audit Operations In this section, you\u0026rsquo;ll use the Python script to audit user and group memberships.\nFind Members of a Specific Group Here\u0026rsquo;s an example of how you can find all members of the \u0026ldquo;AWS_Applied_Scientists\u0026rdquo; group. Refer to the list_members function in the Python code (#199 to #232) in the script for details. This function calls the get_group_id and list_group_memberships APIs for this operation. The Response syntax and exceptions for these API operations can be found in the boto3 documentation.\npython identitystore_operations.py list_members --identitystoreid d-123456a7890 --groupname AWS_Applied_Scientists Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUserName:johndoe,Display Name: John Doe Find User\u0026rsquo;s Group Membership Here\u0026rsquo;s an example of how you can find the group membership of a specific user \u0026ldquo;johndoe\u0026rdquo;. Refer to the list_membership function in the Python code (#235 to #276) in the script for details. This function makes API calls to get_user_id, list_group_memberships_for_member \u0026amp; describe_group for this operation. The Response syntax and exceptions for these API operations can be found in the boto3 documentation.\npython identitystore_operations.py list_membership --identitystoreid d-123456a7890 --username johndoe Note\nReplace the identitystoreid value \u0026ldquo;d-123456a7890\u0026rdquo; with your IdentityStore Id.\nYou should see output like the following:\nSample Output:\nUser :johndoe is a member of the following groups\rAWS_Data_Science\rAWS_Applied_Scientists ‚ÑπÔ∏è Information: Regular auditing of group memberships is an essential security practice. Use these commands to create automated reports and verify that users have appropriate permissions.\nüîí Security Note: Implement a routine audit process to regularly review group memberships, especially for groups with elevated permissions. This helps maintain the principle of least privilege and ensures compliance with security policies.\n"
},
{
	"uri": "//localhost:1313/6-clean-up/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "Resource Cleanup After completing this workshop, you need to delete the AWS resources you created in your account to avoid unnecessary charges.\nRemoving CloudFormation Resources After completing the workshop, delete the CloudFormation stack that was created in the \u0026ldquo;Testing User and Group-based Access\u0026rdquo; section.\n‚ö†Ô∏è Warning: Deleting a CloudFormation stack will remove all resources created by that stack. Ensure you no longer need these resources before proceeding.\nTo delete the CloudFormation stack:\nNavigate to the CloudFormation service page in the AWS Management Console Select the stack (with the name you entered) Click the Delete button Cleaning Up IAM Identity Center Resources ‚ÑπÔ∏è Information: Deleting the IAM Identity Center configuration will remove all users, groups, and permission configurations established within Identity Center.\nTo clean up all IAM Identity Center resources:\nNavigate to the IAM Identity Center Console Select the AWS Region recommended by the AWS Team if this is part of an AWS event, or the Region you configured if you\u0026rsquo;re performing this workshop on your own Select Settings from the left navigation menu On the Settings page, select the Management tab Click the Delete button in the \u0026ldquo;Delete IAM Identity Center configuration\u0026rdquo; section Enter the instance ID in the text field and click the Confirm button in the \u0026ldquo;Confirm delete settings\u0026rdquo; dialog box üí° Pro Tip: Before deleting your IAM Identity Center configuration, make sure you\u0026rsquo;ve documented any configurations you might want to reference in the future, as configurations cannot be recovered once deleted.\nüîí Security Note: After cleanup, verify that all permission sets and assignments have been properly removed to ensure no lingering access remains in your AWS environment.\n"
},
{
	"uri": "//localhost:1313/1-prerequisite/5-provision-permission-sets/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/1-prerequisite/6-test/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/2-aws-cli-access/2.1-manual/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]